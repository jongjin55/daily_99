import java.util.LinkedList;
import java.util.Queue;

public class Test70 {

    static int[] dx = {1, 0, -1, 0};
    static int[] dy = {0, 1, 0, -1};

    public static void main(String[] args) {
        
        int[][] maps = {    {1,0,1,1,1}
                            ,{1,0,1,0,1}
                            ,{1,0,1,1,1}
                            ,{1,1,1,0,1}
                            ,{0,0,0,0,1}
                        };

        int[][] visited = new int[maps.length][maps.length];
        BFS(maps, visited);
        System.out.println( visited[maps.length-1][maps.length-1]);

        for (int i = 0; i < visited.length; i++) {
            for (int j = 0; j < visited.length; j++) {
                System.out.print(visited[i][j] + "\t");
            }
            System.out.println();
        }
        
        }

        public static void BFS(int[][] maps, int[][] visited) {
        
            int x = 0;
            int y = 0;

            visited[x][y] = 1;
            Queue<int[]> queue = new LinkedList<>();
            queue.add(new int[]{x, y});

            while (!queue.isEmpty()) {
                int[] cur = queue.poll();
                
                int cX = cur[0];
                int cY = cur[1];

                for (int i = 0; i < 4; i++) {
                    
                    int nX = cX + dx[i];
                    int nY = cY + dy[i];

                    if(nX < 0 || nY < 0 || nX > maps.length-1 || nY > maps.length-1) {
                        continue;
                    }

                    if(visited[nX][nY] == 0 && maps[nX][nY] == 1) {
                        visited[nX][nY] = visited[cX][cY] + 1;
                        queue.add(new int[] {nX, nY});
                    }
                }
            }

        }

}
